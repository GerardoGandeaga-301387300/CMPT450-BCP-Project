#include "ooo_cpu.h"
#include "../confidence_predictors/SBI.h"
#define BIMODAL_TABLE_SIZE 1024
#define BIMODAL_PRIME 1021
#define MAX_COUNTER 3
int bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];
#define CONF_THRESHOLD 2
#define PRED_THRESHOLD 2

SBI sbi(CONF_THRESHOLD, PRED_THRESHOLD);

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Bimodal branch predictor" << endl;

    for(int i = 0; i < BIMODAL_TABLE_SIZE; i++)
        bimodal_table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash = ip % BIMODAL_PRIME;
    uint8_t prediction = (bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;
    uint8_t sbi_prediction = sbi.predict(ip,prediction);
    return prediction > sbi_prediction ? prediction : sbi_prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint32_t hash = ip % BIMODAL_PRIME;

    if (taken && (bimodal_table[cpu][hash] < MAX_COUNTER))
        bimodal_table[cpu][hash]++;
    else if ((taken == 0) && (bimodal_table[cpu][hash] > 0))
        bimodal_table[cpu][hash]--;
    sbi.update_confidence(ip,taken);
}

uint8_t O3_CPU::get_confidence(uint64_t ip, uint8_t pred){
    return sbi.get_confidence(ip, pred);
}