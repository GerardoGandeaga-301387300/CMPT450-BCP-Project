#include "ooo_cpu.h"
#include "../confidence_predictors/BRPU.h"

#define BIMODAL_TABLE_SIZE 16384
#define BIMODAL_PRIME 16381
#define MAX_COUNTER 3
int bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];

// BPRU configuration
#define RT_SIZE 131072 // 2^15 32kb
#define PHR_SIZE 64
#define MAX_COUNTER 7
BPRU bpru(PHR_SIZE, RT_SIZE, MAX_COUNTER);

void O3_CPU::initialize_branch_predictor()
{
  cout << "CPU " << cpu << " Bimodal branch predictor" << endl;

  for (int i = 0; i < BIMODAL_TABLE_SIZE; i++)
      bimodal_table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash = ip % BIMODAL_PRIME;
    uint8_t prediction = (bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    return bpru.reverse_prediction(ip, prediction);
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint32_t hash = ip % BIMODAL_PRIME;

    if (taken && (bimodal_table[cpu][hash] < MAX_COUNTER))
        bimodal_table[cpu][hash]++;
    else if ((taken == 0) && (bimodal_table[cpu][hash] > 0))
        bimodal_table[cpu][hash]--;

    bpru.update_RT(ip, taken);
}
